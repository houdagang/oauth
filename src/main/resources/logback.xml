<?xml version="1.0" encoding="UTF-8"?>
<!--
    scan:当次属性设置为true时候，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒，
            当scan为true的时候，次属性生效，默认的时间间隔是1分钟
    debug：当次属性设置为true时，将打印chulogback内部日志信息，实时查看logback运行状态。默认值为false
-->
<configuration scan="false" scanPeriod="60 seconds" debug="false">
    <!-- 定义日志的根目录 -->
    <property name="LOG_HOME" value="D:/logs"/>
    <!-- 定义日志文件名称 -->
    <property name="appName" value="oauth"></property>
    <!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!--
            日志输出格式:
                %d表示日期时间，
                %thread表示线程名，
                %-5level:级别从左显示5个字符宽度
                %logger(50) 表示logger名字最长50个字符，否则按照据点分割。
                %msg：日志消息
                %n：换行符
         -->

        <layout class="ch.qos.logback.classic.PatternLayout">
            <!--
                当指定application.properties里面 spring.profiles.activer=dev时候，
                采用第一种格式
                <springProfileb标签的包含的范围可大可小，自己确定即可否则采用第二种格式
            -->
            <springProfile name="dev">
                <pattern>%d{HH:mm:ss.SSS}-->[%thread]-->%-5level %logger{50} - %msg%n</pattern>
            </springProfile>

            <springProfile name="!dev">
                <pattern>%d{HH:mm:ss.SSS}-->[%thread]-->%-5level %logger{50} - %msg%n</pattern>
            </springProfile>
        </layout>
    </appender>

    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="appLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 指定日志文件的名称 -->
        <file>${LOG_HOME}/${appName}.log</file>
        <!--
            当发生滚动时候，决定RollingFileAppender的行为，设计文件移动和重命名
            TimeBasedRollingPolicy:最常用的滚动策略，他根据时间来指定滚动策略，即负责滚动也负责触发滚动
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
                滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}:按天进行滚动
                %i：当文件大小超过 maxFileSize 时，按照i进行文件滚动
            -->
            <fileNamePattern>${LOG_HOME}/${appName}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--
                可选节点：控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置的是每天滚动，
                且maxHistory是365，则值保存最近365天的文件，删除之前的旧文件。注意，删除旧文件时，
                那些为了归档而创建的目录也会被删除。
            -->
            <MaxHistory>365</MaxHistory>
            <!--
                当日志文件超过maxFileSize指定的大小时，根据上面提到的%i进行日志文件滚动
                注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，
                必须配置timeBasedFileNamingAndTriggeringPolicy
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 日志输出格式 -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [%-5level] - [ %logger[50] : %line ] - %msg%n</pattern>
        </layout>
    </appender>

    <!--
           logger主要用于存放日志对象，也可以定义日志类型、级别
           name 表示匹配得logger类型前缀，也就是包的前半部分
           level 要记录的日志级别，包括 TRACE< DEBUG <INFO < WARN < ERROR
           additivity:作用在于children-logger是否使用 rootlogger配置的appender进行输出
           false 表示只用当前logger的appender-ref，
           true 表示当前的logger的appender-ref和rootLogger的appender-ref都有效
       -->
    <!-- 配置制定包输出级别，这里mapper为debug，将会输出sql语句 -->
    <logger name="com.xiaogang.oauth.mapper" level="debug"/>

    <!--
        root与logger为父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
        要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level
    -->
    <root level="debug">
        <!-- 控制台输出，对应上面name="stdout" 配置 -->
        <appender-ref ref="stdout"/>
        <!-- 文件输出，对应上面name="appLogAppender"的配置 -->
        <appender-ref ref="appLogAppender"/>
    </root>

</configuration>